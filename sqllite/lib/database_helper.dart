import 'dart:io';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

class DatabaseHelper {
  //Singleton class
  DatabaseHelper._privateConstructor(); //DatabaseHelper._createInstance();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();
  // static final DatabaseHelper _databaseHelper =
  //     DatabaseHelper._createInstance();
  //?initilize Database
  static Database? _database; //static Database? _database;
  Future<Database?> get database async {
    // _database ??= await initializeDatabase();
    if (_database != null) {
      return _database;
    }
    _database = await _initiateDatabase();
    return _database;
  }

  _initiateDatabase() async {
    Directory directory = await getApplicationDocumentsDirectory();
    String path = join(directory.path, 'myDatabase.db');
    //?join function needs 'path' import
    // String path = directory.path + 'myDatabase.db';
    return await openDatabase(path, version: 1, onCreate: _onCreate);
    // return notesDatabase;
  }

  Future _onCreate(Database db, int version) async {
    await db.execute(
        '''CREATE TABLE $_tableName($columnId INTEGER PRIMARY KEY, $columnName TEXT NOT NULL)''');
    // await db.execute(
    //     'CREATE TABLE $noteTable($colId INTEGER PRIMARY KEY AUTOINCREMENT, $colTitle TEXT, '
    //     '$colDescription TEXT, $colPriority INTEGER, $colDate TEXT)');
  }

  static const _tableName = 'myTable';
  static const columnId = '_id';
  static const columnName = '_name';
//?Insert, Update, Delete, Query in SQFlite
//'_id':12
//'_name': 'Saheb'
  Future<int?> insertNote(Map<String, dynamic> row) async {
    //id is autogenerated
    Database? db = await instance.database;
    return await db?.insert(_tableName, row);
    //? return of this function is int?
  }

  //  Future<int> insertNote(Note note) async {
  //   Database db = await this.database;
  //   var result = await db.insert(noteTable, note.toMap());
  //   return result;
  // }
  Future<List<Map<String, dynamic>>?> queryAll() async {
    //?this will return List of type Map. Map is of type String,dynamic
    Database? db = await instance.database;
    return await db?.query(_tableName);
  }

// Future<List<Map<String, dynamic>>> getNoteMapList() async {
//     Database db = await this.database;
// // var result = await db.rawQuery('SELECT * FROM $noteTable order by $colPriority ASC');
//     var result = await db.query(noteTable, orderBy: '$colPriority ASC');
//     return result;
//   }
  Future<int?> update(Map<String, dynamic> row) async {
    Database? db = await instance.database;
    int id = row[columnId];
    return await db
        ?.update(_tableName, row, where: '$columnId=?', whereArgs: [id]);
    //? '?' will be replaced by whereArds.
    //? this will return number of Rows
  }

// Future<int> updateNote(Note note) async {
//     var db = await this.database;
//     var result = await db.update(noteTable, note.toMap(),
//         where: '$colId = ?', whereArgs: [note.id]);
//     return result;
//   }
  Future<int?> delete(int id) async {
    Database? db = await instance.database;
    return await db?.delete(_tableName, where: '$columnId=?', whereArgs: [id]);
    //? '?' will be replaced by whereArds.
    //? this will return number of Rows
  }
// Future<int> deleteNote(int? id) async {
//     var db = await this.database;
//     int result =
//         await db.rawDelete('DELETE FROM $noteTable WHERE $colId = $id');
//     return result;
//   }

}
